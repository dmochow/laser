% 05.02.19
% call afni_proc.py from here
% as of 05.03.19, the only thing that needed to be run outside of here was
% makeAverageROI.m because those two mofos didn't have markers
clear all; close all; clc;
addpath(genpath('/Users/jacekdmochowski/PROJECTS/COMMON'));
!export PATH=$PATH:/Users/jacekdmochowski/abin
PATH = getenv('PATH');
setenv('PATH', [PATH ':/Users/jacekdmochowski/abin']);
radMask=21.3; depthMask=39.2; % 99 percent min area
%subjStrs={'S02','S03'}; % no markers
%subjStrs={'S04','S05','S06','S07','S09','S10','S11','S12','S13','S14','S15','S16','S17','S18','S19','S20','S21','S22'};
subjStrs={'S23','S24','S25','S26','S27','S28','S29','S30','S31','S32' };
%subjStrs={'S31','S32'};
origPath=pwd;
nSubjects=numel(subjStrs);
for s=1:nSubjects
    subjStr=subjStrs{s}
    
    workingPath=['/Users/jacekdmochowski/PROJECTS/LLLT/data/output/' subjStr '/'];
    mkdir(workingPath);
    pathToScannerData=['/Users/jacekdmochowski/PROJECTS/LLLT/data/scanner_data/' subjStr '/'];
    
    %% brain mask generation
    if ~exist(fullfile(workingPath,'brain_mask+orig.HEAD'),'file')
        cd(workingPath);
        copyfile(fullfile(pathToScannerData,'anat.nii'),fullfile(workingPath,'anat.nii'));
        str1='!3dcopy anat.nii anat';
        str1b='!3dcopy anat.nii anatWithSkull';
        str2='!3dSkullStrip -input anat+orig';
        str3='!3dAutomask -prefix brain_mask skull_strip_out+orig';
        str3b='!gunzip brain_mask+orig.BRIK.gz';
        str3c='!3dSeg -anat skull_strip_out+orig -mask AUTO -classes ''CSF ; GM ; WM'' -bias_classes ''GM ; WM'' -bias_fwhm 25 -mixfrac UNI -main_N 5 -blur_meth BFT';
        eval(str1);
        eval(str1b);
        eval(str2);
        eval(str3);
        eval(str3b);
        eval(str3c);
        cd(origPath);
    end
    
    
    %% make laser ROI
    anatWithSkullFilename=fullfile(workingPath,'anatWithSkull+orig');
    anatBrainMaskFilename=fullfile(workingPath,'brain_mask+orig');
    anatFilename=fullfile(workingPath,'anat+orig');
    %
    [urf,ulf,urb,lrf,midsag]=getMarkerCoords(subjStr);
    if ~isempty(urf)
        laserOrigin = getLaserOrigin(ulf,urf,urb);
        laserOrigin = fineTuneOrigin(anatWithSkullFilename,laserOrigin,ulf,urf,lrf);
        save(fullfile(workingPath,'laserOrigin.mat'),'laserOrigin');
        roiMask = projectLaser(anatBrainMaskFilename,laserOrigin,urf,ulf,urb,lrf,radMask,depthMask);  % project the real laser into the mri
        [~, ~, Info, ~] = BrikLoad (anatFilename); % only to get the 'Info' field
        roiPrefix=['roi_r' num2str(radMask,'%0.0f') '_z' num2str(depthMask,'%0.0f')  ];
        WriteBrikWrap(workingPath,roiMask,Info,roiPrefix,'orig');
    end
    
    
    %% begin afni_proc
    cd(workingPath);
    if ~isempty(urf)
                bashStr=['!afni_proc.py -subj_id ' subjStr ' \' ...
                    '-dsets ' pathToScannerData 'bold_e*.nii                  \'...
                    '-copy_anat ' pathToScannerData 'anat.nii                  \'...
                  '-blocks despike tshift align tlrc volreg blur mask scale regress \'...
                  '-tcat_remove_first_trs 3                                   \'...
                  '-tlrc_base TT_N27+tlrc                            \'...
                  '-tlrc_NL_warp                                              \'...
                  '-volreg_align_e2a                                          \'...
                  '-volreg_tlrc_warp                                          \'...
                  '-mask_epi_anat yes                                         \'...
                  '-regress_anaticor                                          \'...
                  '-regress_censor_motion 0.2                                 \'...
                  '-regress_censor_outliers 0.05                              \'...
                  '-regress_bandpass 0.001 0.1                                 \'...
                  '-regress_apply_mot_types demean deriv                      \'...
                  '-regress_est_blur_epits                                    \'...
                  '-anat_follower_ROI LASER epi roi_r21_z39+orig \'...
                  '-mask_segment_anat yes \' ... 
                  '-regress_est_blur_errts'];

%         bashStr=['!afni_proc.py -subj_id ' subjStr ' \' ...
%             '-blocks tshift align tlrc volreg mask combine \'...
%             'blur scale regress                    \'...
%             '-copy_anat '  pathToScannerData 'anat.nii                       \'...
%             '-dsets_me_run ' pathToScannerData 'bold_e*.nii              \'...
%             '-echo_times 13 34 55                        \'...
%             '-reg_echo 2                                   \'...
%             '-tcat_remove_first_trs 2                      \'...
%             '-align_opts_aea -cost lpc+ZZ                  \'...
%             '-tlrc_base TT_N27+tlrc               \'...
%             '-tlrc_NL_warp                                 \'...
%             '-volreg_align_to MIN_OUTLIER                  \'...
%             '-volreg_align_e2a                             \'...
%             '-volreg_tlrc_warp                             \'...
%             '-mask_epi_anat yes                            \'...
%             '-combine_method tedana                        \'...
%             '-blur_in_mask yes                             \'...
%             '-regress_motion_per_run                       \'...
%             '-regress_censor_motion 0.2                    \'...
%             '-regress_censor_outliers 0.05                 \'...
%             '-regress_apply_mot_types demean deriv         \'...
%             '-regress_est_blur_epits  \'...
%             '-anat_follower_ROI LASER epi roi_r21_z39+orig \'...
%             '-mask_segment_anat yes'];
    else % no markers
        bashStr=['!afni_proc.py -subj_id ' subjStr ' \' ...
            '-blocks tshift align tlrc volreg mask combine \'...
            'blur scale regress                    \'...
            '-copy_anat '  pathToScannerData 'anat.nii                       \'...
            '-dsets_me_run ' pathToScannerData 'bold_e*.nii              \'...
            '-echo_times 13 34 55                        \'...
            '-reg_echo 2                                   \'...
            '-tcat_remove_first_trs 2                      \'...
            '-align_opts_aea -cost lpc+ZZ                  \'...
            '-tlrc_base TT_N27+tlrc               \'...
            '-tlrc_NL_warp                                 \'...
            '-volreg_align_to MIN_OUTLIER                  \'...
            '-volreg_align_e2a                             \'...
            '-volreg_tlrc_warp                             \'...
            '-mask_epi_anat yes                            \'...
            '-combine_method tedana                        \'...
            '-blur_in_mask yes                             \'...
            '-regress_motion_per_run                       \'...
            '-regress_censor_motion 0.2                    \'...
            '-regress_censor_outliers 0.05                 \'...
            '-regress_apply_mot_types demean deriv         \'...
            '-regress_est_blur_epits  \'...
            '-mask_segment_anat yes'];
    end
    eval(bashStr);
    bashStr2=['!tcsh -xef proc.' subjStr ' 2>&1 | tee output.proc.' subjStr];
    eval(bashStr2');
    
    % this is needed to put the laser ROI on BOLD grid
    cd([workingPath '/' subjStr '.results']);
    bashStr3=['!3dresample -master all_runs.' subjStr '+tlrc -prefix resampled_Classes -input Classes+tlrc']; eval(bashStr3);
    eval(bashStr3);
    
    cd(origPath);
    
end
